generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleEnum {
  superuser
  admin
  writer
  reader

  @@map("userRoleEnum")
}

enum EntitiesEnum {
  individual
  organization

  @@map("Entities")
}

enum AccountRelationEnum {
  provider
  customer
}

enum InvoiceStatusEnum {
  draft
  pending
  paid
  cancelled

  @@map("invoiceStatus")
}

enum EmailTypeEnum {
  main
  home
  work
  invoicing
  secondary
  other
}

enum PhoneTypeEnum {
  mobile
  office
  main
  home
  work
  invoicing
  other
}

model account {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  isActive      Boolean        @default(true)
  users         user[]
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  individuals   individual[]
  organizations organization[]
  inventory     inventory[]

  @@map("accounts")
}

model user {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email           String       @unique
  phone           String       @unique
  password        String
  isActive        Boolean      @default(true)
  role            UserRoleEnum
  accountId       String       @map("account_id") @db.Uuid
  account         account      @relation(fields: [accountId], references: [id])
  profile         profile?
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime     @updatedAt @map("updated_at") @db.Timestamptz(3)
  updatedBy       String?      @map("updated_by") @db.Uuid
  createdInvoices invoice[]    @relation("CreatedInvoices")
  updatedInvoices invoice[]    @relation("UpdatedInvoices")

  @@map("users")
}

model profile {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName  String   @map("first_name") @db.VarChar(255)
  lastName   String   @map("last_name") @db.VarChar(255)
  middleName String?  @map("middle_name") @db.VarChar(255)
  userId     String   @unique @map("user_id") @db.Uuid
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy  String   @map("created_by") @db.Uuid
  updatedBy  String   @map("updated_by") @db.Uuid

  @@map("profiles")
}

model address {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  addressLine1  String         @map("address_line_1") @db.VarChar(255)
  addressLine2  String?        @map("address_line_3") @db.VarChar(255)
  addressLine3  String?        @map("address_line_2") @db.VarChar(255)
  locality      String         @db.VarChar(255) // city, village, outpost
  region        String?        @db.VarChar(255) // oblast, region, US state
  postcode      String         @db.VarChar(255) // index, zip code, postal code
  countryId     String         @map("country_id") @db.Uuid // Sweden, USA
  country       country        @relation(fields: [countryId], references: [id]) // Sweden, USA
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy     String         @map("created_by") @db.Uuid
  updatedBy     String         @map("updated_by") @db.Uuid
  individuals   individual[]
  organizations organization[]

  @@map("addresses")
}

model organizationPhone {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type           PhoneTypeEnum
  countryCode    String        @map("country_code") @db.VarChar(255) // 1, 7
  number         String        @db.VarChar(255) // 7125553234
  organizationId String        @map("organization_id") @db.Uuid
  organization   organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy      String        @map("created_by") @db.Uuid
  updatedBy      String        @map("updated_by") @db.Uuid

  @@map("organization_phones")
}

model individualPhone {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type         PhoneTypeEnum
  countryCode  String        @map("country_code") @db.VarChar(255) // 1, 7
  number       String        @db.VarChar(255) // 7125553234
  individualId String        @map("individual_id") @db.Uuid
  individual   individual    @relation(fields: [individualId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy    String        @map("created_by") @db.Uuid
  updatedBy    String        @map("updated_by") @db.Uuid

  @@map("individual_phones")
}

model organizationEmail {
  id             String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type           EmailTypeEnum
  organizationId String        @map("organization_id") @db.Uuid
  organization   organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String        @db.VarChar(255)
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy      String        @map("created_by") @db.Uuid
  updatedBy      String        @map("updated_by") @db.Uuid

  @@map("organization_emails")
}

model individualEmail {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type         EmailTypeEnum
  individualId String        @map("individual_id") @db.Uuid
  individual   individual    @relation(fields: [individualId], references: [id], onDelete: Cascade)
  email        String        @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy    String        @map("created_by") @db.Uuid
  updatedBy    String        @map("updated_by") @db.Uuid

  @@map("individual_emails")
}

model country {
  id                   String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String                @db.VarChar(255)
  abbreviation         String?               @db.VarChar(255)
  locale               String                @db.VarChar(6)
  phoneCode            Int                   @db.SmallInt
  addresses            address[]
  localIdentifierNames localIdentifierName[]

  @@map("countries")
}

model localIdentifierName {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String         @db.VarChar(255)
  abbreviation  String?        @db.VarChar(12)
  countryId     String         @map("country_id") @db.Uuid
  country       country        @relation(fields: [countryId], references: [id], onDelete: Restrict)
  type          EntitiesEnum
  individuals   individual[]
  organizations organization[]
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy     String         @map("created_by") @db.Uuid
  updatedBy     String         @map("updated_by") @db.Uuid

  @@unique([name, countryId], name: "unique_identifier_per_country")
  @@map("local_identifier_names")
}

// Individuals (both clients and service providers)
model individual {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  avatar                Bytes?              @db.ByteA()
  firstName             String              @map("first_name") @db.VarChar(255)
  lastName              String              @map("last_name") @db.VarChar(255)
  middleName            String?             @map("middle_name") @db.VarChar(255)
  dob                   DateTime?           @db.Date
  description           String?             @db.Text
  localIdentifierNameId String              @map("local_identifier_name_id") @db.Uuid
  localIdentifierName   localIdentifierName @relation(fields: [localIdentifierNameId], references: [id], onDelete: Restrict)
  localIdentifierValue  String?             @map("local_identifier_value")
  attributes            Json?               @db.JsonB
  addressId             String              @map("address_id") @db.Uuid
  address               address             @relation(fields: [addressId], references: [id])
  accountId             String              @map("account_id") @db.Uuid
  account               account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountRelation       AccountRelationEnum @map("account_relation")
  customerId            String?             @unique @map("customer_id") @db.Uuid
  customer              customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  emails                individualEmail[]
  phones                individualPhone[]
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy             String              @map("created_by") @db.Uuid
  updatedBy             String              @map("updated_by") @db.Uuid

  @@map("individuals")
}

// Organizations (both clients and service providers)
model organization {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  avatar                Bytes?              @db.ByteA()
  name                  String              @db.VarChar(255)
  description           String?             @db.Text
  isPrivate             Boolean             @default(true) @map("is_private") @db.Boolean // as opposed to government
  isCharity             Boolean             @default(false) @map("is_charity") @db.Boolean // as opposed to for profit
  typeId                String?             @map("type_id") @db.Uuid
  type                  organizationType?   @relation(fields: [typeId], references: [id])
  localIdentifierNameId String              @map("local_identifier_name_id") @db.Uuid
  localIdentifierName   localIdentifierName @relation(fields: [localIdentifierNameId], references: [id], onDelete: Restrict)
  localIdentifierValue  String?             @map("local_identifier_value")
  attributes            Json?               @db.JsonB
  addressId             String              @map("address_id") @db.Uuid
  address               address             @relation(fields: [addressId], references: [id])
  accountId             String              @map("account_id") @db.Uuid
  account               account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountRelation       AccountRelationEnum @map("account_relation")
  customerId            String?             @unique @map("customer_id") @db.Uuid
  customer              customer?           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  emails                organizationEmail[]
  phones                organizationPhone[]
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt             DateTime            @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy             String              @map("created_by") @db.Uuid
  updatedBy             String              @map("updated_by") @db.Uuid

  @@map("organizations")
}

model organizationType {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type          String         @db.VarChar(255) // AB, Handelsbolag, LLC, Corporation
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(3)
  organizations organization[]

  @@map("organization_types")
}

model inventoryType {
  id        String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String      @unique @db.VarChar(255) // service, product, miscellaneous
  inventory inventory[]
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime    @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy String      @map("created_by") @db.Uuid
  updatedBy String      @map("updated_by") @db.Uuid

  @@map("inventory_type")
}

// The inventory belongs to an account (many to one)
model inventory {
  id                String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String        @db.VarChar(255) // hair-cut, installation, screw-driver, pipe
  description       String?       @db.Text
  typeId            String        @map("type_id") @db.Uuid
  type              inventoryType @relation(fields: [typeId], references: [id]) // service, product
  accountId         String        @map("account_id") @db.Uuid
  account           account       @relation(fields: [accountId], references: [id])
  price             BigInt        @db.BigInt
  externalCode      String?       @map("external_code") @db.VarChar(255) // e.g. code from store invoice or receipt
  internalCode      String?       @map("internal_code") @db.VarChar(255) // e.g. code inside accounting software
  manufacturerCode  String?       @map("manufacturer_code") @db.VarChar(255) // e.g. code from store invoice or receipt
  manufacturerPrice BigInt?       @db.BigInt
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime      @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy         String        @map("created_by") @db.Uuid
  updatedBy         String        @map("updated_by") @db.Uuid
  invoiceItems      invoiceItem[]
}

model customer {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  isActive     Boolean       @default(true) @map("is_active")
  invoices     invoice[]
  organization organization?
  individual   individual?
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("customers")
}

// One has to create logic where the invoice and its items cannot change
// as soon as it received status 'paid'.
model invoice {
  id                         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // Number assigned to invoice for internal purposes
  number                     String
  date                       DateTime          @db.Timestamptz(3)
  // Fixed fields at the moment of invoice creation/update
  // as customer or provider data may change over time.
  customerName               String            @map("customer_name") @db.VarChar(255)
  customerAddressLine1       String            @map("customer_address_line_1") @db.VarChar(255)
  customerAddressLine2       String?           @map("customer_address_line_2") @db.VarChar(255)
  customerAddressLine3       String?           @map("customer_address_line_3") @db.VarChar(255)
  customerLocality           String            @map("customer_locality") @db.VarChar(255)
  customerRegion             String?           @map("customer_region") @db.VarChar(255)
  customerPostCode           String            @map("customer_post_code") @db.VarChar(255)
  customerCountry            String            @map("customer_country") @db.VarChar(255)
  customerPhone              String            @map("customer_phone") @db.VarChar(255)
  customerEmail              String            @map("customer_email") @db.VarChar(255)
  customerId                 String            @map("customer_id") @db.Uuid
  customer                   customer          @relation(fields: [customerId], references: [id], onDelete: Restrict)
  providerAvatar             Bytes?            @map("provider_avatar") @db.ByteA()
  providerName               String            @map("provider_name") @db.VarChar(255)
  providerAddressLine1       String            @map("provider_address_line_1") @db.VarChar(255)
  providerAddressLine2       String?           @map("provider_address_line_2") @db.VarChar(255)
  providerAddressLine3       String?           @map("provider_address_line_3") @db.VarChar(255)
  providerLocality           String            @map("provider_locality") @db.VarChar(255)
  providerRegion             String?           @map("provider_region") @db.VarChar(255)
  providerPostCode           String            @map("provider_post_code") @db.VarChar(255)
  providerCountry            String            @map("provider_country") @db.VarChar(255)
  providerPhone              String            @map("provider_phone") @db.VarChar(255)
  providerEmail              String            @map("provider_email") @db.VarChar(255)
  status                     InvoiceStatusEnum
  // Inventory items with fixed name, price and other info
  invoiceItems               invoiceItem[]
  // Number related to PO, if any existed.
  // For example, all/some invoice items were purchased from a certain
  // store/manufacturer which fulfilled the PO number.
  // Usually used for internal purposes.
  purchaseOrderNumbers       String[]          @map("purchase_order_numbers") @db.VarChar(255)
  // Numbers related to Invoices issued by store/manufacturer, if any existed.
  // For example, all/some invoice items were purchased from a certain
  // store/manufacturer which provided the invoice(s)
  // Usually used for internal purposes
  manufacturerInvoiceNumbers String[]          @map("manufacturer_invoice_numbers") @db.VarChar(255)
  // Irbitrary information provided to customer
  additionalInformation      String?           @map("additional_information") @db.Text
  payBy                      DateTime          @map("pay_by") @db.Timestamptz(3)
  paidOn                     DateTime?         @map("paid_on") @db.Timestamptz(3)
  // How to pay
  paymentInfo                String?           @map("payment_info") @db.Text
  // Any additional terms and conditions
  terms                      String?           @db.Text
  // Tax percentage (can be state sales tax in USA or VAT in Europe)
  tax                        Int               @default(0) @db.Integer
  // Discount percentage on whole invoice
  discount                   Int               @default(0) @db.Integer
  // Internal notes
  notes                      String?           @db.Text
  createdAt                  DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt                  DateTime          @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy                  String            @map("created_by") @db.Uuid
  updatedBy                  String            @map("updated_by") @db.Uuid
  createdByUser              user              @relation("CreatedInvoices", fields: [createdBy], references: [id])
  updatedByUser              user              @relation("UpdatedInvoices", fields: [updatedBy], references: [id])

  @@map("invoices")
}

model invoiceItem {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // Field from Inventory.name, may not match with inventory item
  // with inventoryID in this table as the inventory item data may change
  name        String    @map("name") @db.Text
  // Price is also from Inventory table, but may not match
  // with inventory item with inventoryId on record, as inventory prices
  // have a tendency to change over the time.
  price       BigInt    @db.BigInt
  quantity    Int       @db.Integer
  invoiceId   String    @map("invoice_id") @db.Uuid
  invoice     invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Used strictly for archiving/analytics purposes.
  // The inventory data may change, so this field
  // only shows the original inventory item ID
  // and cannot be relied upon.
  inventoryId String    @map("inventory_id") @db.Uuid
  inventory   inventory @relation(fields: [inventoryId], references: [id], onDelete: Restrict)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  createdBy   String    @map("created_by") @db.Uuid
  updatedBy   String    @map("updated_by") @db.Uuid

  @@map("invoice_items")
}

// model revenue {
//   month   String @unique @db.VarChar(4)
//   revenue Int
// }
